/* eslint-disable no-unused-vars */
/* eslint-disable no-console */
// Generated by https://quicktype.io

// Converts JSON strings to/from your types
// and asserts the results of JSON.parse at runtime

let typeMap;

function invalidValue(typ, val, propName = "") {
  // console.log(propName);
  throw Error(
    `Invalid value ${JSON.stringify(val)} for type ${JSON.stringify(typ)}`
  );
}

function invalidValueCatch(typ, val, propName = "") {

  throw Error(
    `Invalid value ${JSON.stringify(val)} for type ${JSON.stringify(typ)}`
  );
}

function jsonToJSProps(typ) {
  if (typ.jsonToJS === undefined) {
    var map = {};
    typ.props.forEach(p => (map[p.json] = { key: p.js, typ: p.typ }));
    typ.jsonToJS = map;
  }
  return typ.jsonToJS;
}

function jsToJSONProps(typ) {
  if (typ.jsToJSON === undefined) {
    var map = {};
    typ.props.forEach(p => (map[p.js] = { key: p.json, typ: p.typ }));
    typ.jsToJSON = map;
  }
  return typ.jsToJSON;
}

function transform(val, typ, getProps, propName = "") {
  function transformPrimitive(typ, val, propName = "") {
    if (typeof typ === typeof val) return val;
    return invalidValue(typ, val, propName);
  }

  function transformUnion(typs, val) {
    // val must validate against one typ in typs
    var l = typs.length;
    for (var i = 0; i < l; i++) {
      var typ = typs[i];
      try {
        return transform(val, typ, getProps);
      } catch (_) {
        // console.log(_)
      }
    }
    return invalidValue(typs, val);
  }

  function transformEnum(cases, val) {
    if (cases.indexOf(val) !== -1) return val;
    return invalidValue(cases, val);
  }

  function transformArray(typ, val) {
    // val must be an array with no invalid elements
    if (!Array.isArray(val)) return invalidValue("array", val);
    return val.map(el => transform(el, typ, getProps));
  }

  function transformObject(props, additional, val) {
    if (val === null || typeof val !== "object" || Array.isArray(val)) {
      return invalidValue("object", val, '',props);
    }
    var result = {};
    Object.getOwnPropertyNames(props).forEach(key => {
      const prop = props[key];
      const v = Object.prototype.hasOwnProperty.call(val, key)
        ? val[key]
        : undefined;
      result[prop.key] = transform(v, prop.typ, getProps, prop);
    });
    Object.getOwnPropertyNames(val).forEach(key => {
      if (!Object.prototype.hasOwnProperty.call(props, key)) {
        result[key] = transform(val[key], additional, getProps, key);
      }
    });
    return result;
  }

  if (typ === "any") return val;
  if (typ === null) {
    if (val === null) return val;
    return invalidValue(typ, val);
  }
  if (typ === false) return invalidValue(typ, val, propName);
  while (typeof typ === "object" && typ.ref !== undefined) {
    typ = typeMap[typ.ref];
  }
  if (Array.isArray(typ)) return transformEnum(typ, val);
  if (typeof typ === "object") {
    return typ.hasOwnProperty("unionMembers")
      ? transformUnion(typ.unionMembers, val)
      : typ.hasOwnProperty("arrayItems")
      ? transformArray(typ.arrayItems, val)
      : typ.hasOwnProperty("props")
      ? transformObject(getProps(typ), typ.additional, val)
      : invalidValue(typ, val);
  }
  return transformPrimitive(typ, val, propName);
}

function cast(val, typ) {
  return transform(val, typ, jsonToJSProps);
}

function uncast(val, typ) {
  return transform(val, typ, jsToJSONProps);
}

function a(typ) {
  return { arrayItems: typ };
}

function u(...typs) {
  return { unionMembers: typs };
}

function o(props, additional) {
  return { props, additional };
}

function r(name) {
  return { ref: name };
}

const typeMapCity = {
  "City": o([
    { json: "cnt", js: "cnt", typ: u(undefined, 0) },
    { json: "count", js: "cnt", typ: u(undefined, 0) },
    { json: "cod", js: "cod", typ: u(undefined, '') },
    { json: "message", js: "message", typ: u(undefined, '') },
    { json: "list", js: "list", typ: a(r("List")) },
  ], 'any'),
  "List": o([
    { json: "coord", js: "coord", typ: r("Coord") },
    { json: "sys", js: "sys", typ: r("Sys") },
    { json: "weather", js: "weather", typ: a(r("Weather")) },
    { json: "main", js: "main", typ: r("Main") },
    { json: "visibility", js: "visibility", typ: u(undefined, 0) },
    { json: "wind", js: "wind", typ: r("Wind") },
    { json: "rain", js: "rain", typ: u(undefined, 'any') },
    { json: "snow", js: "snow", typ: u(undefined, 'any') },
    { json: "clouds", js: "clouds", typ: r("Clouds") },
    { json: "dt", js: "dt", typ: 0 },
    { json: "id", js: "id", typ: 0 },
    { json: "name", js: "name", typ: "" },
  ], 'any'),
  "Clouds": o([
    { json: "all", js: "all", typ: 0 },
  ], 'any'),
  "Coord": o([
    { json: "lon", js: "lon", typ: 3.14 },
    { json: "lat", js: "lat", typ: 3.14 },
  ], 'any'),
  "Main": o([
    { json: "temp", js: "temp", typ: 3.14 },
    { json: "pressure", js: "pressure", typ: 3.14 },
    { json: "humidity", js: "humidity", typ: 0 },
    { json: "temp_min", js: "temp_min", typ: 3.14 },
    { json: "temp_max", js: "temp_max", typ: 3.14 },
    { json: "sea_level", js: "sea_level", typ: u(undefined, 3.14) },
    { json: "grnd_level", js: "grnd_level", typ: u(undefined, 3.14) },
  ], 'any'),
  "Sys": o([
    { json: "type", js: "type", typ: u(undefined, 0) },
    { json: "id", js: "id", typ: u(undefined, 0) },
    { json: "message", js: "message", typ: u(undefined, 3.14) },
    { json: "country", js: "country", typ: "" },
    { json: "sunrise", js: "sunrise", typ: u(undefined, 0) },
    { json: "sunset", js: "sunset", typ: u(undefined, 0) },
  ], 'any'),
  "Weather": o([
    { json: "id", js: "id", typ: 0 },
    { json: "main", js: "main", typ: "" },
    { json: "description", js: "description", typ: "" },
    { json: "icon", js: "icon", typ: "" },
  ], 'any'),
  "Wind": o([
    { json: "speed", js: "speed", typ: u(undefined, 3.14) },
    { json: "deg", js: "deg", typ: u(undefined, 3.14) },
    { json: "gust", js: "gust", typ: u(undefined, 3.14) },
  ], 'any'),
};

export function toCity(json) {
  typeMap = typeMapCity;
  const res = cast(JSON.parse(json), r("City"));
  res.list = res.list.map(el => {
    el.country = el.sys.country
    return el;
  });
  return res;
}

export function cityToJson(value) {
  typeMap = typeMapFromID;
  return JSON.stringify(uncast(value, r("City")), null, 2);
}

const typeMapFromID = {
  CityFromID: o(
    [
      { json: "cnt", js: "cnt", typ: 0 },
      { json: "list", js: "list", typ: a(r("List")) }
    ],
    'any'
  ),
  List: o(
    [
      { json: "sys", js: "sys", typ: r("Sys") },
      { json: "weather", js: "weather", typ: a(r("Weather")) },
      { json: "main", js: "main", typ: r("Main") },
      { json: "visibility", js: "visibility", typ: u(undefined, 0) },
      { json: "wind", js: "wind", typ: r("Wind") },
      { json: "clouds", js: "clouds", typ: r("Clouds") },
      { json: "dt", js: "dt", typ: 0 },
      { json: "id", js: "id", typ: 0 },
      { json: "name", js: "name", typ: "" },
      { json: "coord", js: "coord", typ: r("Coord") }
    ],
    'any'
  ),
  Clouds: o([{ json: "all", js: "all", typ: 0 }], 'any'),
  Coord: o(
    [
      { json: "lon", js: "lon", typ: u(undefined, 3.14) },
      { json: "lat", js: "lat", typ: u(undefined, 3.14) }
    ],
    'any'
  ),
  Main: o(
    [
      { json: "temp", js: "temp", typ: u(undefined, 3.14) },
      { json: "pressure", js: "pressure", typ: u(undefined, 3.14) },
      { json: "humidity", js: "humidity", typ: u(undefined, 3.14) },
      { json: "temp_min", js: "temp_min", typ: u(undefined, 3.14) },
      { json: "temp_max", js: "temp_max", typ: u(undefined, 3.14) },
      { json: "sea_level", js: "sea_level", typ: u(undefined, 3.14) },
      { json: "grnd_level", js: "grnd_level", typ: u(undefined, 3.14) }
    ],
    'any'
  ),
  Sys: o(
    [
      { json: "type", js: "type", typ: 0 },
      { json: "id", js: "id", typ: 0 },
      { json: "message", js: "message", typ: 3.14 },
      { json: "country", js: "country", typ: "" },
      { json: "sunrise", js: "sunrise", typ: 0 },
      { json: "sunset", js: "sunset", typ: 0 }
    ],
    'any'
  ),
  Weather: o(
    [
      { json: "id", js: "id", typ: 0 },
      { json: "main", js: "main", typ: "" },
      { json: "description", js: "description", typ: "" },
      { json: "icon", js: "icon", typ: "" }
    ],
    'any'
  ),
  Wind: o(
    [
      { json: "speed", js: "speed", typ: u(undefined, 3.14) },
      { json: "deg", js: "deg", typ: u(undefined, 3.14) },
      { json: "gust", js: "gust", typ: u(undefined, 3.14) }
    ],
    'any'
  )
};

export function toCityFromID(json) {
  typeMap = typeMapFromID;
  return cast(JSON.parse(json), r("CityFromID"));
}

export function cityFromIDToJson(value) {
  typeMap = typeMapFromID;
  return JSON.stringify(uncast(value, r("CityFromID")), null, 2);
}

const typeMap5Day = {
  "The5Day": o([
    { json: "cod", js: "cod", typ: "" },
    { json: "message", js: "message", typ: 3.14 },
    { json: "cnt", js: "cnt", typ: 0 },
    { json: "list", js: "list", typ: a(r("List")) },
    { json: "city", js: "city", typ: r("City") },
  ], 'any'),
  "City": o([
    { json: "id", js: "id", typ: 0 },
    { json: "name", js: "name", typ: "" },
    { json: "coord", js: "coord", typ: r("Coord") },
    { json: "country", js: "country", typ: "" },
  ], 'any'),
  "Coord": o([
    { json: "lat", js: "lat", typ: 3.14 },
    { json: "lon", js: "lon", typ: 3.14 },
  ], 'any'),
  "List": o([
    { json: "dt", js: "dt", typ: 0 },
    { json: "main", js: "main", typ: r("MainClass") },
    { json: "weather", js: "weather", typ: a(r("Weather")) },
    { json: "clouds", js: "clouds", typ: r("Clouds") },
    { json: "wind", js: "wind", typ: r("Wind") },
    { json: "sys", js: "sys", typ: r("Sys") },
    { json: "dt_txt", js: "dt_txt", typ: "" },
    { json: "snow", js: "snow", typ: u(undefined, r("Rain")) },
    { json: "rain", js: "rain", typ: u(undefined, r("Rain")) },
  ], 'any'),
  "Clouds": o([
    { json: "all", js: "all", typ: 0 },
  ], 'any'),
  "MainClass": o([
    { json: "temp", js: "temp", typ: 3.14 },
    { json: "temp_min", js: "temp_min", typ: 3.14 },
    { json: "temp_max", js: "temp_max", typ: 3.14 },
    { json: "pressure", js: "pressure", typ: 3.14 },
    { json: "sea_level", js: "sea_level", typ: 3.14 },
    { json: "grnd_level", js: "grnd_level", typ: 3.14 },
    { json: "humidity", js: "humidity", typ: 0 },
    { json: "temp_kf", js: "temp_kf", typ: 3.14 },
  ], 'any'),
  "Rain": o([
    { json: "3h", js: "3h", typ: u(undefined, 3.14) },
  ], 'any'),
  "Sys": o([
    { json: "pod", js: "pod", typ: r("Pod") },
  ], 'any'),
  "Weather": o([
    { json: "id", js: "id", typ: 0 },
    { json: "main", js: "main", typ: r("MainEnum") },
    { json: "description", js: "description", typ: '' },
    { json: "icon", js: "icon", typ: "" },
  ], 'any'),
  "Wind": o([
    { json: "speed", js: "speed", typ: 3.14 },
    { json: "deg", js: "deg", typ: 3.14 },
  ], 'any'),
  "Pod": [
    "d",
    "n",
  ],
  "MainEnum": [
    "Clear",
    "Clouds",
    "Rain",
    "Snow",
  ],
};

export function toCityFrom5Day(json) {
  typeMap = typeMap5Day;
  return cast(JSON.parse(json), r("The5Day"));
}

export function cityFrom5DayToJson(value) {
  typeMap = typeMap5Day;
  return JSON.stringify(uncast(value, r("The5Day")), null, 2);
}

